# Generated by Django 3.0.4 on 2021-08-28 09:22

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import veloce.models.listings
import veloce.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BookSale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bill_no', models.CharField(max_length=32, unique=True)),
                ('bill_date', models.DateField()),
                ('bill_amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Total Bill Amount')),
                ('billing_party_name', models.CharField(max_length=40)),
                ('inquired_by', models.CharField(max_length=40)),
                ('dealer_gst_no', models.CharField(blank=True, max_length=15, null=True)),
                ('billing_party_gst_no', models.CharField(blank=True, max_length=15, null=True)),
                ('upload_bill', models.FileField(upload_to='veloce/static/veloce-store/uploaded-bills/', verbose_name='Upload Bill')),
                ('is_applied', models.BooleanField(default=False)),
                ('is_loan_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Category Descriptions')),
                ('category_img', models.FileField(upload_to='veloce/static/veloce-store/category-images/', verbose_name='Upload Image')),
                ('slug', models.SlugField(blank=True, max_length=140, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeneralRewardPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dealer_reward_point', models.PositiveIntegerField(blank=True, null=True)),
                ('customer_reward_point', models.PositiveIntegerField(blank=True, null=True)),
                ('gen_reward_start_date', models.DateTimeField()),
                ('gen_reward_end_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True, verbose_name='Product Name')),
                ('is_featured_product', models.BooleanField(default=False)),
                ('specification', models.TextField(blank=True, null=True, verbose_name='Specification')),
                ('slug', models.SlugField(blank=True, max_length=140, unique=True)),
                ('after_warranty_service', models.CharField(max_length=60, verbose_name='After Warranty Service')),
                ('local_service_location', models.CharField(max_length=40, verbose_name='Local Service Location')),
                ('showroom_location', models.CharField(blank=True, max_length=40, null=True, verbose_name='Showroom Location')),
                ('condition', models.CharField(choices=[('New', 'New'), ('Old', 'Old')], default=1, max_length=10, verbose_name='Condition')),
                ('brand_name', models.CharField(max_length=20, verbose_name='Brand Name')),
                ('place_of_origin', models.CharField(max_length=40, verbose_name='Place Of Origin')),
                ('power_watt', models.CharField(blank=True, max_length=5, null=True, verbose_name='Power Watt')),
                ('power', models.CharField(blank=True, max_length=5, null=True)),
                ('dimension', models.CharField(max_length=20, verbose_name='Product Dimension')),
                ('certification', models.CharField(max_length=20, verbose_name='Certification')),
                ('warranty', models.PositiveIntegerField(verbose_name='Warranty')),
                ('after_sales_service_provided', models.CharField(max_length=60, verbose_name='After Sales Service Provided')),
                ('engine', models.CharField(blank=True, max_length=20, null=True)),
                ('engine_type', models.CharField(blank=True, max_length=40, null=True, verbose_name='Engine Type')),
                ('unique_selling_point', models.CharField(blank=True, max_length=40, null=True, verbose_name='Unique Selling Point')),
                ('is_this_physical_product', models.BooleanField(default=False, verbose_name='Is This Physical Product')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_categories', to='veloce.Category', verbose_name='Category')),
            ],
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount_code', models.CharField(max_length=32, unique=True)),
                ('discount_type', models.SmallIntegerField(choices=[(1, 'Percentage'), (2, 'Fixed Amount')], default=1)),
                ('value', models.PositiveIntegerField(default=0)),
                ('minimum_requirement', models.SmallIntegerField(choices=[(0, 'None'), (1, 'Minimal Order Value'), (2, 'Minimum Quantity Of Items')], default=0)),
                ('minimum_value', models.PositiveIntegerField(default=0)),
                ('Limit_to_one_use_per_customer', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_coupon_code', to='veloce.Product')),
            ],
        ),
        migrations.CreateModel(
            name='VeloceUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_role', models.SmallIntegerField(choices=[(1, 'Customer'), (1, 'Vendor')], default=3)),
                ('first_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Invalid characters in name.', regex='^[A-Za-z]{2,20}$')])),
                ('last_name', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Invalid characters in name.', regex='^[A-Za-z]{2,20}$')])),
                ('email_address', models.EmailField(max_length=60, unique=True, validators=[veloce.validators.EmailValidator])),
                ('gender', models.SmallIntegerField(choices=[(1, 'Male'), (2, 'Female'), (3, 'Other')])),
                ('birthdate', models.DateField()),
                ('created_at', models.DateField(auto_now=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionRewardDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dealer_reward_point', models.PositiveIntegerField()),
                ('customer_reward_point', models.PositiveIntegerField()),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book_sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trans_book_sale', to='veloce.BookSale')),
                ('customer_rewards', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trans_customer_reward', to=settings.AUTH_USER_MODEL)),
                ('dealer_rewards', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trans_dealer_reward', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Sub Category Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Sub Category Descriptions')),
                ('sub_category_img', models.FileField(upload_to='veloce/static/veloce-store/sub-category-images/', verbose_name='Upload Image')),
                ('slug', models.SlugField(blank=True, max_length=140, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_category', to='veloce.Category')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialRewardPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dealer_reward_point', models.PositiveIntegerField(blank=True, null=True)),
                ('customer_reward_point', models.PositiveIntegerField(blank=True, null=True)),
                ('gen_reward_start_date', models.DateTimeField()),
                ('gen_reward_end_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reward_product', models.ManyToManyField(related_name='reward_product', to='veloce.Product')),
                ('reward_to_dealer', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spl_dealer_reward', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('discount_type', models.SmallIntegerField(choices=[(1, 'Percentage'), (2, 'Fixed Amount')], default=1)),
                ('value', models.PositiveIntegerField(default=0)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discount_on_category', to='veloce.Category')),
                ('product', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discount_on_product', to='veloce.Product')),
                ('sub_category', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discount_on_sub_category', to='veloce.SubCategory')),
            ],
        ),
        migrations.CreateModel(
            name='RecentlyVisited',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_counter', models.PositiveIntegerField(default=0)),
                ('last_visited', models.DateTimeField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veloce.Category')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veloce.Product')),
                ('sub_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veloce.SubCategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.SmallIntegerField(default=0)),
                ('is_complete', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('completion_level', models.SmallIntegerField(default=-1)),
                ('verification_level', models.SmallIntegerField(default=-1)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(blank=True, null=True, upload_to=veloce.models.listings.get_image_filename, validators=[veloce.validators.validate_file_extension_image], verbose_name='Product Images')),
                ('demo_video', models.FileField(blank=True, null=True, upload_to=veloce.models.listings.get_video_filename, validators=[veloce.validators.validate_file_extension_video], verbose_name='Demo Videos')),
                ('is_feature_image', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_media', to='veloce.Product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductInquiry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inquiry_message', models.TextField()),
                ('is_product_bill_generated', models.BooleanField(default=False)),
                ('is_product_financed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inquiry_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inquiry_by_user', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_inquiry', to='veloce.Product')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='sub_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_category', to='veloce.SubCategory', verbose_name='Sub Category'),
        ),
        migrations.AddField(
            model_name='product',
            name='vendor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vendor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PriceStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.SmallIntegerField(choices=[(1, 'Daily'), (2, 'Monthly'), (3, 'Quarterly'), (4, 'Semi Annually'), (5, 'Annually'), (6, 'One Time')], verbose_name='frequency')),
                ('label', models.CharField(max_length=25, verbose_name='label')),
                ('currency', models.SmallIntegerField(choices=[(23, 'Usd'), (24, 'Inr')], verbose_name='currency')),
                ('amount', models.PositiveIntegerField(verbose_name='Amount')),
                ('disc_per', models.PositiveIntegerField(verbose_name='Disc in per ')),
                ('disc_amt', models.PositiveIntegerField(verbose_name='Disc in amt')),
                ('amt_before_tax', models.PositiveIntegerField(verbose_name='Amt before tax')),
                ('taxes', models.PositiveIntegerField()),
                ('final_amt', models.PositiveIntegerField(verbose_name='Final Amount')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_visible_home', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_prices', to='veloce.Product')),
            ],
        ),
        migrations.CreateModel(
            name='PackagingDeliveryDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selling_units', models.SmallIntegerField(verbose_name='Selling Units')),
                ('single_package_size', models.CharField(max_length=30, verbose_name='Single Package Size')),
                ('single_gross_weight', models.CharField(max_length=30, verbose_name='Single Gross Weight')),
                ('package_type', models.SmallIntegerField(choices=[(1, 'Packed In One Carton Box Or Wooden Box'), (2, 'Section In Separate Package')], default=1, verbose_name='Package Type')),
                ('packing_size', models.CharField(max_length=30, verbose_name='Packing Size')),
                ('packing_weight', models.CharField(max_length=30, verbose_name='Packing Weight')),
                ('picture', models.ImageField(null=True, upload_to=veloce.models.listings.get_image_filename)),
                ('lead_time', models.CharField(max_length=25, verbose_name='Lead Time')),
                ('shipping_charges', models.PositiveIntegerField(blank=True, null=True, verbose_name='Shipping Charges')),
                ('shipping_time', models.CharField(max_length=25, verbose_name='Shipping Time')),
                ('finance_scheme', models.BooleanField(default=False, verbose_name='Finance Scheme')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='product_delivery_detail', to='veloce.Product')),
            ],
        ),
        migrations.CreateModel(
            name='DealersGivenFinanceScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_of_interest', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(1)], verbose_name='ROI(%)')),
                ('tenure', models.PositiveIntegerField(verbose_name='Tenure (in months)')),
                ('product', models.CharField(max_length=200)),
                ('is_admin_approved', models.BooleanField(default=False)),
                ('is_admin_rejected', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dealers_finance_scheme', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BookSaleDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inq_product_name', models.TextField(max_length=45)),
                ('qty', models.PositiveIntegerField()),
                ('inq_product_price', models.PositiveIntegerField()),
                ('inq_product_gross_amt', models.PositiveIntegerField()),
                ('inq_product_disc_amt', models.PositiveIntegerField()),
                ('inq_product_tax', models.PositiveIntegerField()),
                ('inq_product_final_amt', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book_sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_sale_details', to='veloce.BookSale')),
                ('ref_inq_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_sale_inquiry', to='veloce.ProductInquiry')),
            ],
        ),
        migrations.AddField(
            model_name='booksale',
            name='dealers_given_finance_scheme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='veloce.DealersGivenFinanceScheme'),
        ),
        migrations.AddField(
            model_name='booksale',
            name='inquiry',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bill_disc_inquiry', to='veloce.ProductInquiry'),
        ),
        migrations.CreateModel(
            name='ProductRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rated_value', models.IntegerField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_rating', to='veloce.Product')),
                ('rated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('product', 'rated_by')},
            },
        ),
    ]
